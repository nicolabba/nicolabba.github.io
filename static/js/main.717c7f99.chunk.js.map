{"version":3,"sources":["reportWebVitals.ts","pages/sudoku/sudoku.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Sudoku","props","state","shownData","Array","from","length","_","index","dataHistory","solving","deepCopy","bind","getColumn","getRow","hasError","isSolved","onNumberSelected","onBackClicked","solve","inObject","outObject","key","value","isArray","this","Math","floor","data","findIndex","el","el2","index1","index2","index3","error","selectedValue","forEach","element","innerIndex2","foundIndex","it","splice","fixNumber","element1","innerIndex1","element2","setState","slice","a","Promise","resolve","setTimeout","minElement","minIndexes","solved","newData","className","map","element3","onClick","toString","ThemeProvider","Button","disabled","onSolveClicked","React","Component","ReactDOM","render","StrictMode","path","document","getElementById"],"mappings":"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","file":"static/js/main.717c7f99.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './sudoku.css';\nimport React  from 'react';\nimport {Button, ThemeProvider} from \"@react95/core\";\n\ntype SudokuData = Array<Array<Array<number>>>\n\nclass Sudoku extends React.Component<any, {shownData: SudokuData, dataHistory: Array<SudokuData>, solving: boolean}> {\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            shownData: Array.from({length: 9}, (_, index) => Array.from({length: 9}, (_, index) => [1, 2, 3, 4, 5, 6, 7, 8, 9])),\n            dataHistory: [],\n            solving: false\n        }\n        this.deepCopy = this.deepCopy.bind(this)\n        this.getColumn = this.getColumn.bind(this)\n        this.getRow = this.getRow.bind(this)\n        this.hasError = this.hasError.bind(this)\n        this.isSolved = this.isSolved.bind(this)\n        this.onNumberSelected = this.onNumberSelected.bind(this)\n        this.onBackClicked = this.onBackClicked.bind(this)\n        this.solve = this.solve.bind(this)\n    }\n\n    componentDidMount() {\n        // this.typeNextText()\n    }\n\n    deepCopy<T>(inObject: T): T {\n        let outObject: any\n        let key, value\n\n        if (typeof inObject !== \"object\" || inObject === null) {\n            return inObject // Return the value if inObject is not an object\n        }\n\n        // Create an array or object to hold the values\n        outObject = Array.isArray(inObject) ? [] : {}\n\n        for (key in inObject) {\n            // @ts-ignore\n            value = inObject[key]\n\n            // Recursively (deep) copy for nested objects, including arrays\n            outObject[key] = this.deepCopy(value)\n        }\n\n        return outObject\n    }\n\n    getColumn(index: number): number { return index % 3 }\n\n    getRow(index: number): number { return Math.floor(index / 3) }\n\n    hasError(data: SudokuData) { return data.findIndex(el => el.findIndex(el2 => el2.length === 0) !== -1) !== -1 }\n\n    isSolved(data: SudokuData) { return data.findIndex(el => el.findIndex(el2 => el2.length !== 1) !== -1) === -1 }\n\n    fixNumber(data: SudokuData, index1: number, index2: number, index3: number): boolean {\n        let error = false\n        const selectedValue = data[index1][index2][index3]\n        data[index1][index2] = [selectedValue]\n\n        // Operate in the square\n        data[index1].forEach((element, innerIndex2) => {\n            if (innerIndex2 !== index2) {\n                const foundIndex = element.findIndex(it => it === selectedValue)\n                if (foundIndex !== -1) {\n                    element.splice(foundIndex, 1)\n                    if (element.length === 1) {\n                        this.fixNumber(data, index1, innerIndex2, 0)\n                    } else if (element.length === 0) {\n                        error = true\n                    }\n                }\n            }\n        })\n\n        // Operate in rows and columns\n        data.forEach((element1, innerIndex1) => {\n            if (innerIndex1 !== index1 && (this.getRow(innerIndex1) === this.getRow(index1) || this.getColumn(innerIndex1) === this.getColumn(index1))) {\n                element1.forEach((element2, innerIndex2) => {\n                    if (this.getRow(innerIndex2) === this.getRow(index2) || this.getColumn(innerIndex2) === this.getColumn(index2)) {\n                        const foundIndex = element2.findIndex(it => it === selectedValue)\n                        if (foundIndex !== -1) {\n                            element2.splice(foundIndex, 1)\n                            if (element2.length === 1) {\n                                this.fixNumber(data, innerIndex1, innerIndex2, 0)\n                            } else if (element2.length === 0) {\n                                error = true\n                            }\n                        }\n                    }\n                })\n            }\n        })\n\n        this.setState({shownData: data})\n        return error\n    }\n\n    onNumberSelected(data: SudokuData, index1: number, index2: number, index3: number): boolean {\n        this.setState({ dataHistory: [...this.state.dataHistory, this.deepCopy(this.state.shownData)] })\n        return this.fixNumber(data, index1, index2, index3)\n    }\n\n    onBackClicked() {\n        this.setState({\n            shownData: this.state.dataHistory[this.state.dataHistory.length - 1],\n            dataHistory: this.state.dataHistory.slice(0, this.state.dataHistory.length - 1)\n        })\n    }\n\n    onSolveClicked() {\n        this.setState({\n            solving: true,\n            dataHistory: [...this.state.dataHistory, this.state.shownData]\n        })\n        this.solve(this.state.shownData).then(() => {\n            this.setState({\n                solving: false\n            })\n        })\n    }\n\n    async solve(data: SudokuData): Promise<boolean> {\n        return await new Promise(resolve => {\n            setTimeout(async () => {\n                if (this.isSolved(data)) resolve(true)\n                else if (this.hasError(data)) resolve(false)\n                else {\n                    let minElement: number[] | null = null;\n                    let minIndexes: number[] = []\n                    data.forEach((element1, index1) => {\n                        element1.forEach((element2, index2) => {\n                            if (element2.length > 1 && (minElement == null || element2.length < minElement.length)) {\n                                minElement = element2\n                                minIndexes = [index1, index2]\n                            }\n                        })\n                    })\n                    if (minElement == null) minElement = []\n\n                    let solved = false\n                    for (let index = 0; index < minElement.length; index++) {\n                        if (!solved) {\n                            let newData = this.deepCopy(data)\n                            this.fixNumber(newData, minIndexes[0], minIndexes[1], index)\n                            solved = await this.solve(newData)\n                        }\n                    }\n                    resolve(solved)\n                }\n            }, 50)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"sudoku main-container\">\n                    {this.state.shownData.map((element, index) => {\n                        return <div className=\"sudoku\" key={index.toString()}>\n                            {element.map((element2, index2) => {\n                                return <div className=\"sudoku\" key={index.toString() + index2.toString()}>\n                                    {element2.map((element3, index3) => {\n                                        return <div className=\"sudoku-option\" key={index.toString() + index2.toString() + element3.toString()}\n                                                    onClick={() => this.onNumberSelected(this.state.shownData, index, index2, index3)}>\n                                            {element3}\n                                        </div>\n                                    })}\n                                </div>\n                            })}\n                        </div>\n                    })}\n                </div>\n                <ThemeProvider>\n                    <Button disabled={this.state.dataHistory.length < 1 || this.state.solving} onClick={() => this.onBackClicked()} className=\"button\">Back</Button>\n                    <Button disabled={this.state.solving} onClick={() => this.onSolveClicked()} className=\"button\">Solve</Button>\n                </ThemeProvider>\n            </div>\n        );\n    }\n}\n\nexport default Sudoku;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Routes, Route, HashRouter} from \"react-router-dom\";\n// import Main from \"./pages/main/main\";\nimport Sudoku from \"./pages/sudoku/sudoku\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n          <Routes>\n              <Route path=\"/\">\n                  <Route index element={<Sudoku />} />\n                  <Route path=\"sudoku\" element={<Sudoku />} />\n              </Route>\n          </Routes>\n      </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}